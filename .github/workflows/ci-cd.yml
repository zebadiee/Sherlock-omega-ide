name: 🧠 Sherlock Ω CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Quality Gates - TypeScript compilation, ESLint, security audit
  quality-gates:
    name: 🔍 Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔧 TypeScript Compilation
        run: npm run build

      - name: 🧹 ESLint Check
        run: npm run lint

      - name: 🔒 Security Audit
        run: npm audit --audit-level=high

      - name: 📊 Bundle Size Check
        run: |
          npm run build
          du -sh dist/
          echo "Bundle size check completed"

  # Comprehensive Testing - Unit/integration tests with 90% coverage requirement
  comprehensive-testing:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    needs: quality-gates
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧪 Run Unit Tests
        run: npm test -- --coverage --watchAll=false

      - name: 🔬 Run Integration Tests
        run: npm run test:integration

      - name: 📊 Coverage Report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: sherlock-omega-coverage

      - name: ✅ Coverage Threshold Check
        run: |
          COVERAGE=$(npm test -- --coverage --watchAll=false --silent | grep "All files" | awk '{print $10}' | sed 's/%//')
          if [ "$COVERAGE" -lt "90" ]; then
            echo "❌ Coverage $COVERAGE% is below 90% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets 90% threshold"
          fi

  # Formal Verification - Mathematical proof checking and healing algorithm validation
  formal-verification:
    name: 🔬 Formal Verification
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔬 Formal Proof Validation
        run: npm run test:formal-verification

      - name: 🧠 Healing Algorithm Validation
        run: npm run test:healing-algorithms

      - name: 📊 Mathematical Correctness Check
        run: npm run verify:mathematical-proofs

  # Build & Package - Production build optimization and Docker image creation
  build-and-package:
    name: 📦 Build & Package
    runs-on: ubuntu-latest
    needs: [quality-gates, comprehensive-testing]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Production Build
        run: npm run build:prod

      - name: 📊 Bundle Analysis
        run: npm run analyze:bundle

      - name: 🐳 Build Docker Image
        run: |
          docker build -t sherlock-omega:${{ github.sha }} .
          docker tag sherlock-omega:${{ github.sha }} sherlock-omega:latest

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            README.md

  # Demo Deployment - Deploy demo to GitHub Pages
  deploy-demo:
    name: 🌐 Deploy Demo
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.ref == 'refs/heads/master'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Demo
        run: npm run build:demo

      - name: 🚀 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./demo-dist
          cname: sherlock-omega.dev

  # NPM Package Release
  npm-release:
    name: 📦 NPM Release
    runs-on: ubuntu-latest
    needs: [comprehensive-testing, formal-verification, build-and-package]
    if: github.event_name == 'release'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Package
        run: npm run build

      - name: 🔍 Package Verification
        run: |
          npm pack --dry-run
          npm run test:package

      - name: 📤 Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🏷️ Create GitHub Release Assets
        run: |
          npm pack
          mv sherlock-omega-*.tgz sherlock-omega-${{ github.event.release.tag_name }}.tgz

      - name: 📎 Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./sherlock-omega-${{ github.event.release.tag_name }}.tgz
          asset_name: sherlock-omega-${{ github.event.release.tag_name }}.tgz
          asset_content_type: application/gzip

  # Performance Monitoring
  performance-monitoring:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    needs: build-and-package
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: ⚡ Performance Benchmarks
        run: npm run benchmark

      - name: 📊 Bundle Size Tracking
        run: npm run track:bundle-size

      - name: 🎯 Zero-Friction Metrics
        run: npm run metrics:zero-friction

  # Security Scanning
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: typescript, javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: 🛡️ Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Notification & Reporting
  notification:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [comprehensive-testing, formal-verification, build-and-package]
    if: always()
    steps:
      - name: 📊 Pipeline Status
        run: |
          if [ "${{ needs.comprehensive-testing.result }}" == "success" ] && 
             [ "${{ needs.formal-verification.result }}" == "success" ] && 
             [ "${{ needs.build-and-package.result }}" == "success" ]; then
            echo "✅ Sherlock Ω Pipeline: ALL SYSTEMS OPERATIONAL"
            echo "🧠 Zero-Friction Protocol: ACTIVE"
            echo "🚀 Computational Consciousness: ONLINE"
          else
            echo "❌ Sherlock Ω Pipeline: ISSUES DETECTED"
            echo "🔧 Healing Protocol: INVESTIGATING"
          fi

      - name: 🎯 Success Metrics
        if: success()
        run: |
          echo "📊 Pipeline Metrics:"
          echo "  • Quality Gates: ✅ PASSED"
          echo "  • Test Coverage: ✅ >90%"
          echo "  • Formal Verification: ✅ VALIDATED"
          echo "  • Zero-Friction Protocol: ✅ OPERATIONAL"
          echo "  • Mathematical Proofs: ✅ VERIFIED"