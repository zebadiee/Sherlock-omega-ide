name: Sherlock Î© IDE - CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - quantum
          - ai
          - integration
          - security
      deploy_environment:
        description: 'Environment to deploy to'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # ============================================================================
  # Code Quality & Security Analysis
  # ============================================================================
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          npm run quantum:install

      - name: Lint and Format Check
        run: |
          npm run lint
          npm run format:check

      - name: Type Check
        run: |
          npm run type-check

      - name: Run Tests with Coverage
        run: |
          npm run test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Extract Coverage
        id: coverage
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage/

      - name: Archive Coverage Reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: coverage/

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.test_suite == 'security'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
          npm audit fix --dry-run

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: SAST with CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ============================================================================
  # Quantum Algorithm Testing
  # ============================================================================
  quantum-tests:
    name: Quantum Algorithm Tests
    runs-on: ubuntu-latest
    if: |
      contains(github.event.head_commit.message, 'quantum') || 
      github.event.inputs.test_suite == 'quantum' ||
      github.event.inputs.test_suite == 'all'
    strategy:
      matrix:
        quantum-backend: ['simulator', 'qasm']
        algorithm: ['basic', 'advanced']
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python for Quantum Libraries
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          npm ci
          npm run quantum:install
          pip install qiskit qiskit-aer

      - name: Run Quantum Algorithm Tests
        run: |
          npm run test:quantum -- --backend=${{ matrix.quantum-backend }}
        env:
          QUANTUM_TEST_MODE: ci
          QUANTUM_BACKEND: ${{ matrix.quantum-backend }}
          ALGORITHM_SUITE: ${{ matrix.algorithm }}

      - name: Quantum Performance Benchmarks
        if: matrix.quantum-backend == 'simulator'
        run: |
          npm run benchmark:quantum
          
      - name: Upload Quantum Test Results
        uses: actions/upload-artifact@v3
        with:
          name: quantum-test-results-${{ matrix.quantum-backend }}-${{ matrix.algorithm }}
          path: |
            quantum-test-results/
            quantum-benchmarks/

  # ============================================================================
  # AI/ML Integration Tests
  # ============================================================================
  ai-tests:
    name: AI/ML Integration Tests
    runs-on: ubuntu-latest
    if: |
      contains(github.event.head_commit.message, 'ai') || 
      github.event.inputs.test_suite == 'ai' ||
      github.event.inputs.test_suite == 'all'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run AI Integration Tests
        run: npm run test:ai
        env:
          # Use mock API keys for testing
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
          AI_TEST_MODE: mock

      - name: Test Bot Builder Functionality
        run: npm run test:bot-builder

      - name: Validate AI Model Responses
        run: npm run test:ai-validation

  # ============================================================================
  # Cross-Platform Build Tests
  # ============================================================================
  build-test:
    name: Build Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20']
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        run: npm run build

      - name: Test Build Artifacts
        run: |
          npm run test:build
          npm run test:integration

      - name: Package for Distribution
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
        run: npm run package

      - name: Upload Build Artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            package/

  # ============================================================================
  # Performance Testing
  # ============================================================================
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Performance Benchmarks
        run: |
          npm run benchmark:all
          npm run benchmark:memory
          npm run benchmark:startup

      - name: Upload Performance Reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: benchmarks/

  # ============================================================================
  # Docker Build and Test
  # ============================================================================
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Image
        run: |
          docker run --rm ghcr.io/${{ github.repository }}:latest npm test

  # ============================================================================
  # Deployment
  # ============================================================================
  deploy:
    name: Deploy to ${{ github.event.inputs.deploy_environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [code-quality, build-test, security-scan]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event.inputs.deploy_environment
    environment: ${{ github.event.inputs.deploy_environment || 'staging' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./artifacts

      - name: Deploy to Staging
        if: github.event.inputs.deploy_environment == 'staging' || github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to staging environment..."
          # Add deployment script here

      - name: Deploy to Production
        if: github.event.inputs.deploy_environment == 'production'
        run: |
          echo "Deploying to production environment..."
          # Add production deployment script here

      - name: Update Deployment Status
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments \
            -d '{
              "ref": "${{ github.sha }}",
              "environment": "${{ github.event.inputs.deploy_environment || 'staging' }}",
              "description": "Automated deployment via GitHub Actions"
            }'

  # ============================================================================
  # Notification and Reporting
  # ============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, quantum-tests, ai-tests, build-test]
    if: always()
    steps:
      - name: Prepare Status Report
        id: status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" && 
                "${{ needs.build-test.result }}" == "success" ]]; then
            echo "status=â All checks passed" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=â Some checks failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Post to Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#sherlock-omega-ci'
          text: |
            ${{ steps.status.outputs.status }}
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Coverage: ${{ needs.code-quality.outputs.coverage }}%
            
            View Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}