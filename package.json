{
  "name": "sherlock-omega-ide",
  "version": "1.0.0",
  "description": "Revolutionary Self-Healing Development Environment - Computational Consciousness IDE",
  "main": "dist/index.js",
  "scripts": {
    "build": "tsc",
    "dev": "ts-node src/index.ts",
    "demo": "EVOLUTION_MODE=manual ts-node src/web/demo-server.ts",
    "demo:enhanced": "ts-node src/web/enhanced-demo-server.ts",
    "demo:simple": "ts-node src/web/simple-demo-server.ts",
    "demo:build": "npm run build && EVOLUTION_MODE=manual node dist/web/demo-server.js",
    "demo:ai-bot": "ts-node src/examples/ai-bot-demo.ts",
    "demo:ide-quantum": "ts-node src/examples/ide-integration-demo.ts",
    "bot": "ts-node src/ai/cli/bot-cli.ts",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:unit": "jest --testPathPattern=__tests__",
    "test:integration": "jest --testPathPattern=integration",
    "test:formal-verification": "jest --testPathPattern=verification",
    "test:quantum": "jest --testPathPattern=\"quantum|enhanced\"",
    "lint": "eslint src/**/*.ts",
    "format": "prettier --write src/**/*.ts",
    "docs:generate": "typedoc --out docs/api src/ai/core/enhanced-interfaces.ts",
    "quantum:install": "npm install quantum-circuit",
    "quantum:test": "node -e \"const QC = require('quantum-circuit'); console.log('‚úÖ Quantum libraries ready!');\"",
    "test:system": "ts-node scripts/test-quantum-system.ts",
    "demo:grover": "ts-node src/examples/grover-search-demo.ts",
    "demo:quantum-all": "npm run demo:grover && npm run demo:ide-quantum",
    "build:web": "echo 'üèóÔ∏è Building React dashboard...' && npm run build",
    "dev:web": "echo 'üöÄ Starting validation dashboard...' && npx ts-node src/web/index.tsx",
    "validation": "npx ts-node src/validation/test-validation.ts",
    "demo:all": "ts-node scripts/run-all-demos.ts",
    "bootstrap:self-builder": "ts-node src/examples/self-builder-bootstrap.ts",
    "self-build": "npm run bootstrap:self-builder",
    "fix:ports": "lsof -ti:3001,3002,3000 | xargs kill -9 || true",
    "health:check": "node -e \"console.log('üè• System Health Check'); const pm = require('./dist/utils/process-manager.js').processManager; console.log(pm.getResourceUsage());\"",
    "n8n:setup": "echo 'üìã n8n Setup Instructions:' && echo '1. Install n8n: npm install -g n8n' && echo '2. Run bootstrap to generate nodes' && echo '3. Import generated nodes into n8n'",
    "evolve": "ts-node src/cli/evolution-cli.ts",
    "evolve:status": "npm run evolve status",
    "evolve:history": "npm run evolve history",
    "evolve:quantum": "npm run evolve quick quantum-algorithm",
    "evolve:security": "npm run evolve quick security-audit",
    "evolve:performance": "npm run evolve quick performance-boost",
    "evolve:tests": "npm run evolve quick test-coverage",
    "demo:evolution": "ts-node src/examples/evolution-demo.ts",
    "demo:evolution:cli": "ts-node src/examples/evolution-demo.ts cli",
    "demo:evolution:integration": "ts-node src/examples/evolution-demo.ts integration",
    "simulate": "npm run bot quantum simulate",
    "simulate:bell": "npm run simulate bell --verbose",
    "simulate:ghz": "npm run simulate ghz --verbose",
    "simulate:deutsch": "npm run simulate deutsch-jozsa --verbose",
    "simulate:teleport": "npm run simulate teleportation --verbose",
    "simulate:superdense": "npm run simulate superdense --verbose",
    "simulate:grover": "npm run simulate grover --verbose",
    "simulate:all": "npm run bot quantum validate --noise",
    "simulate:noisy": "npm run bot quantum validate --noise --threshold 0.90",
    "demo:quantum-simulation": "ts-node src/examples/quantum-simulation-demo.ts",
    "demo:quantum-advanced": "ts-node src/examples/quantum-simulation-demo.ts advanced",
    "demo:grover-evolution": "ts-node src/examples/grover-evolution-demo.ts",
    "demo:grover-analysis": "ts-node src/examples/grover-evolution-demo.ts analysis",
    "quantum-evolve": "ts-node src/cli/quantum-evolution-cli.ts",
    "quantum:simulate": "npm run quantum-evolve simulate",
    "quantum:validate-all": "npm run quantum-evolve validate-all",
    "quantum:evolve": "npm run quantum-evolve evolve-quantum",
    "quantum:preset:grover": "npm run quantum-evolve preset grover",
    "quantum:preset:shor": "npm run quantum-evolve preset shor",
    "quantum:preset:qaoa": "npm run quantum-evolve preset qaoa",
    "quantum:preset:vqe": "npm run quantum-evolve preset vqe",
    "quantum:stats": "npm run quantum-evolve stats",
    "demo:complete-quantum": "ts-node src/examples/complete-quantum-evolution-demo.ts",
    "demo:quantum-theory": "ts-node src/examples/complete-quantum-evolution-demo.ts theory",
    "polished-cli": "ts-node src/cli/polished-quantum-cli.ts",
    "quantum:polished:simulate": "npm run polished-cli simulate",
    "quantum:polished:simulate-all": "npm run polished-cli simulate-all",
    "quantum:polished:evolve": "npm run polished-cli evolve",
    "quantum:polished:stats": "npm run polished-cli stats",
    "quantum:polished:health": "npm run polished-cli health",
    "quantum:polished:template": "npm run polished-cli template",
    "dashboard": "ts-node src/web/quantum-dashboard.ts",
    "dashboard:start": "npm run dashboard",
    "demo:polished-system": "ts-node src/examples/polished-system-demo.ts",
    "demo:polished-dashboard": "ts-node src/examples/polished-system-demo.ts dashboard",
    "demo:polished-full": "ts-node src/examples/polished-system-demo.ts full",
    "ultra": "ts-node src/cli/ultra-cli-entry.ts",
    "ultra:simulate": "npm run ultra ultra:simulate",
    "ultra:evolve": "npm run ultra ultra:evolve",
    "ultra:explore": "npm run ultra ultra:explore",
    "ultra:interactive": "npm run ultra ultra:simulate --interactive",
    "demo:ultra": "npm run ultra demo:ultra",
    "demo:ultra-interactive": "ts-node src/examples/ultra-system-demo.ts interactive",
    "demo:ultra-benchmark": "ts-node src/examples/ultra-system-demo.ts benchmark",
    "build:interactive": "ts-node src/cli/interactive-build-cli.ts interactive",
    "build:quick": "ts-node src/cli/interactive-build-cli.ts build",
    "build:stats": "ts-node src/cli/interactive-build-cli.ts stats",
    "dashboard:interactive": "ts-node src/web/interactive-dashboard.ts",
    "agentic": "ts-node src/cli/agentic-ai-cli.ts",
    "agentic:ask": "npm run agentic ask",
    "agentic:chat": "npm run agentic chat",
    "agentic:simulate": "npm run agentic simulate",
    "agentic:demo": "npm run agentic demo",
    "agentic:insights": "npm run agentic insights",
    "agentic:intelligence": "npm run agentic intelligence",
    "agentic:dashboard": "ts-node src/web/agentic-ai-dashboard.ts",
    "demo:agentic-poc": "ts-node src/examples/agentic-ai-poc-demo.ts",
    "demo:stakeholder": "ts-node src/examples/agentic-ai-poc-demo.ts stakeholder",
    "demo:technical": "ts-node src/examples/agentic-ai-poc-demo.ts technical"
  },
  "bin": {
    "sherlock-bot": "./dist/ai/cli/bot-cli.js"
  },
  "keywords": [
    "ide",
    "self-healing",
    "computational-consciousness",
    "formal-verification",
    "github-integration",
    "quantum-computing",
    "ai-bots",
    "quantum-algorithms"
  ],
  "author": "Sherlock Œ© Contributors",
  "license": "MIT",
  "dependencies": {
    "@langchain/langgraph": "^0.2.74",
    "@langchain/openai": "^0.3.17",
    "@types/express": "^5.0.3",
    "@types/socket.io": "^3.0.1",
    "boxen": "^5.1.2",
    "chalk": "^4.1.2",
    "commander": "^12.0.0",
    "eslint": "^8.49.0",
    "express": "^5.1.0",
    "figlet": "^1.8.2",
    "inquirer": "^8.2.7",
    "monaco-editor": "^0.52.2",
    "mongodb": "^6.18.0",
    "ora": "^5.4.1",
    "quantum-circuit": "^0.9.241",
    "rxjs": "^7.8.1",
    "socket.io": "^4.8.1",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@types/figlet": "^1.7.0",
    "@types/inquirer": "^9.0.9",
    "@types/jest": "^29.5.5",
    "@types/mongodb": "^4.0.6",
    "@types/node": "^18.17.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@typescript-eslint/eslint-plugin": "^6.7.0",
    "@typescript-eslint/parser": "^6.7.0",
    "eslint": "^8.49.0",
    "jest": "^29.7.0",
    "prettier": "^3.0.3",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.1",
    "typescript": "^5.2.2"
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node",
    "roots": [
      "<rootDir>/src"
    ],
    "testMatch": [
      "**/__tests__/**/*.test.ts"
    ],
    "collectCoverageFrom": [
      "src/**/*.ts",
      "!src/**/*.d.ts",
      "!src/**/__tests__/**"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 90,
        "functions": 90,
        "lines": 90,
        "statements": 90
      }
    }
  }
}
